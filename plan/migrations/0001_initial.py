# Generated by Django 5.2.5 on 2025-08-23 14:03

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('payment', '0002_alter_payment_amount'),
        ('questionnaire', '0004_alter_question_options_answer_created_at_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DietPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('diet_type', models.CharField(choices=[('balanced', 'Balanced Diet'), ('low_carb', 'Low Carb'), ('high_protein', 'High Protein'), ('keto', 'Ketogenic'), ('vegetarian', 'Vegetarian'), ('vegan', 'Vegan'), ('mediterranean', 'Mediterranean'), ('intermittent_fasting', 'Intermittent Fasting')], max_length=20)),
                ('daily_calorie_target', models.IntegerField(validators=[django.core.validators.MinValueValidator(1000)])),
                ('duration_weeks', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('protein_percentage', models.DecimalField(decimal_places=2, default=Decimal('20'), max_digits=5)),
                ('carb_percentage', models.DecimalField(decimal_places=2, default=Decimal('30'), max_digits=5)),
                ('fat_percentage', models.DecimalField(decimal_places=2, default=Decimal('50'), max_digits=5)),
                ('meal_plan', models.JSONField(default=dict, help_text='Weekly meal plan structure')),
                ('food_restrictions', models.JSONField(default=list)),
                ('preferred_foods', models.JSONField(default=list)),
                ('shopping_list', models.JSONField(default=list, help_text='Generated shopping list')),
                ('generated_from_ai', models.BooleanField(default=False)),
                ('ai_confidence_score', models.FloatField(blank=True, null=True)),
                ('generation_algorithm_version', models.CharField(default='v1.0', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diet_plans', to=settings.AUTH_USER_MODEL)),
                ('user_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diet_plans', to='questionnaire.usergoal')),
            ],
        ),
        migrations.CreateModel(
            name='PlanGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Payment'), ('queued', 'Queued for Generation'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('ai_prompt_sent', models.TextField(blank=True)),
                ('ai_response_raw', models.JSONField(blank=True, default=dict)),
                ('ai_provider', models.CharField(default='openai', max_length=50)),
                ('algorithm_version', models.CharField(default='v1.0', max_length=20)),
                ('generation_rules_applied', models.JSONField(blank=True, default=dict)),
                ('processing_time_seconds', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('queued_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('diet_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='plan.dietplan')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='payment.payment')),
                ('user_goal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='plan_generation', to='questionnaire.usergoal')),
            ],
        ),
        migrations.AddField(
            model_name='dietplan',
            name='plan_generation',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plan.plangeneration'),
        ),
        migrations.CreateModel(
            name='RecommendationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('conditions', models.JSONField(help_text='JSON conditions to match against answers')),
                ('workout_recommendations', models.JSONField(blank=True, default=dict)),
                ('diet_recommendations', models.JSONField(blank=True, default=dict)),
                ('priority', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_rules', to='questionnaire.goal')),
            ],
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_step', models.CharField(choices=[('goal_selection', 'Goal Selection'), ('questionnaire', 'Questionnaire'), ('payment_pending', 'Payment Pending'), ('payment_completed', 'Payment Completed'), ('plan_generation', 'Plan Generation'), ('plan_ready', 'Plan Ready'), ('completed', 'Completed')], default='goal_selection', max_length=20)),
                ('completed_steps', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='payment.payment')),
                ('selected_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='questionnaire.usergoal')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('difficulty_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], max_length=20)),
                ('duration_weeks', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('sessions_per_week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('workout_schedule', models.JSONField(default=dict, help_text='Weekly workout structure')),
                ('exercises', models.JSONField(default=list, help_text='List of exercises with details')),
                ('equipment_needed', models.JSONField(default=list)),
                ('generated_from_ai', models.BooleanField(default=False)),
                ('ai_confidence_score', models.FloatField(blank=True, null=True)),
                ('generation_algorithm_version', models.CharField(default='v1.0', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('plan_generation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plan.plangeneration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plans', to=settings.AUTH_USER_MODEL)),
                ('user_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workout_plans', to='questionnaire.usergoal')),
            ],
        ),
        migrations.CreateModel(
            name='UserPlanSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField(auto_now_add=True)),
                ('user_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('user_feedback', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('diet_plan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='plan.dietplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='plan_summary', to=settings.AUTH_USER_MODEL)),
                ('user_goal', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='questionnaire.usergoal')),
                ('workout_plan', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='plan.workoutplan')),
            ],
        ),
        migrations.AddField(
            model_name='plangeneration',
            name='workout_plan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='plan.workoutplan'),
        ),
        migrations.CreateModel(
            name='PlanVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_type', models.CharField(choices=[('diet', 'Diet Plan'), ('workout', 'Workout Plan')], max_length=20)),
                ('version_number', models.IntegerField(default=1)),
                ('plan_data', models.JSONField()),
                ('modification_reason', models.TextField(blank=True)),
                ('modified_by_user', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_current', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'plan_type', 'version_number')},
            },
        ),
    ]
